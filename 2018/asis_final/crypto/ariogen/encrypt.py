def makekey(nbit):
    D = getRandomRange(1, nbit**3)
    p = gmpy.next_prime(fprime + D)
    q = getPrime(nbit)
    pubkey = (0x10001, int(p*q)) 
    return pubkey
def encrypt(m, pubkey):
    m = bytes_to_long(m)
    e, n = pubkey
    assert m < n
    while True:
        r = random.randint(1, n - 1)
        if gcd(r, n) == 1:
            c = (pow(r, e, n**2) * (r**2 + m*n)) % n ** 2
            break
    return c



enc=16038347822833548792504481129497860127653347782461000291318119466062386078240855807203323823069017533114675024210474005519087639086569010945624641156746082728091554457299533165656478657930227234699409211321475959560773562984405093399456579404778282245641667757238232852945686847935094802590089576830278850869069592164379298837515112707861073215127048839081736567436831573082930285494600683422016470434631885333965629964413128695503152971466022061854600806410652400008086104643179580580560989450218909364501438229944514525552049427598636930303777680413562922417006649207711682645656253608370531768806725885821069594975

pubkey=(65537,148647722832169098747504472843120040569705566783525048675999460902815804701257466230561678369475482243635938454842058815270435731339682344419585671675931223671540784366896407656881397231398634919891543153816273343432271226963244855465718180550390719060500119056284385489889121148139566487598888802921350402507L)

